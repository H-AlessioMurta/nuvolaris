## NOTE! This script should be sourced, not executed. 
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
if test -z "$BASH"
then echo "Please, source me using bash." ; kill -INT $$
fi
if [[ "${BASH_SOURCE[0]}" == "${0}" ]] 
then echo "You must source this script with bash, not execute it." ; kill -INT $$
fi

# versions
export PS1="[\W]\$ "
export NODENV_VERSION=16.13.0
export PYENV_VERSION=3.9.9
export GOENV_VERSION=1.17.3
export DOCKER_VERSION=18.03
export JAVA_VERSION=8

# env roots
export PYENV_ROOT="$HOME/.pyenv"
export NODENV_ROOT="$HOME/.nodenv"
export GOENV_ROOT="$HOME/.goenv"

# Preflight checks
die() {
    echo ERROR: "$@"
    kill -INT $$
}

ok() {
    echo OK: "$@"
}

checkDockerVersion(){
    SERVER_VERSION=$(docker version -f "{{.Server.Version}}")

    SERVER_VERSION_MAJOR=$(echo "$SERVER_VERSION"| cut -d'.' -f1)
    SERVER_VERSION_MINOR=$(echo "$SERVER_VERSION"| cut -d'.' -f2)

    DOCKER_VERSION_MAJOR=$(echo "$DOCKER_VERSION"| cut -d'.' -f1)
    DOCKER_VERSION_MINOR=$(echo "$DOCKER_VERSION"| cut -d'.' -f2)

    if ([ "$SERVER_VERSION_MAJOR" -lt "$DOCKER_VERSION_MAJOR" ]) || \
       ([ "$SERVER_VERSION_MAJOR" -eq "$DOCKER_VERSION_MAJOR" ] && [ "$SERVER_VERSION_MINOR" -lt "$DOCKER_VERSION_MINOR" ]); then
        die "Please install docker version >= $DOCKER_VERSION"
    else
        ok "docker version $SERVER_VERSION"
    fi

}

if ! which gcc >/dev/null
then die "Please install development tools"
else ok gcc
fi

if ! which git >/dev/null
then die "Please install git"
else ok git
fi

if ! which docker >/dev/null
then die "Please install docker and assign access to this user"
else ok docker
fi

if [ -f /.dockerenv ] && [ -S /var/run/docker-host.sock  ] || [ ! -f /.dockerenv ]; then
  checkDockerVersion
fi

if ! which kubectl >/dev/null
then die "Please install kubectl"
else ok kubectl
fi

if ! which wsk >/dev/null
then die "Please install wsk"
else ok wsk
fi

if ! which java >/dev/null
then die "Please install java"
else ok java
fi

if [ "$(java --version |head -1 | cut -d' ' -f2 | cut -d'.' -f1)" -lt "$JAVA_VERSION" ]; then
    die "Please install java version >= $JAVA_VERSION"
else
    ok "java version $(java --version |head -1 | cut -d' ' -f2 | cut -d'.' -f1)"
fi

# Install
if ! test -d $GOENV_ROOT
then git clone https://github.com/syndbg/goenv.git $GOENV_ROOT
else ok goenv
fi

if ! test -e $NODENV_ROOT
then git clone https://github.com/nodenv/nodenv.git $NODENV_ROOT
     mkdir "$NODENV_ROOT/plugins"
     git clone https://github.com/nodenv/node-build.git "$NODENV_ROOT"/plugins/node-build
else ok nodenv
fi

if ! test -e $PYENV_ROOT
then git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
else ok pyenv
fi

export GOBIN="$HOME/.local/bin"
export PATH="$GOBIN:$GOENV_ROOT/bin:$NODENV_ROOT/bin:$PYENV_ROOT/bin:$PATH"

eval "$(nodenv init -)"
nodenv install $NODENV_VERSION -s
echo $NODENV_VERSION >.node-version

eval "$(pyenv init --path)"
eval "$(pyenv init -)"
pyenv install $PYENV_VERSION -s
echo $PYENV_VERSION >.python-version

eval "$(goenv init -)"
goenv install $GOENV_VERSION -s
echo $GOENV_VERSION >.go-version

# install task
if ! which task >/dev/null
then go install github.com/go-task/task/v3/cmd/task@latest
else ok task
fi

# install ansible
if ! which ansible >/dev/null
then pip install ansible
else ok ansible
fi

# install httpie
if ! which http >/dev/null
then pip install httpie
else ok httpie
fi

# install addlicense
if ! which license-eye >/dev/null
then go install github.com/apache/skywalking-eyes/cmd/license-eye@latest
else ok license-eye
fi

# install poetry
if ! which poetry >/dev/null
then curl -sSL https://install.python-poetry.org | python3 -
else ok poetry
fi

# install jest
if ! nodenv which jest >/dev/null
then npm install -g jest
else ok jest
fi
export PATH="$(nodenv prefix)/bin:$PATH"

# install coursier
if ! which cs >/dev/null
then curl -sfLo $HOME/.local/bin/cs https://git.io/coursier-cli-"$(uname | tr LD ld)"
     chmod +x $HOME/.local/bin/cs  
else ok coursier
fi
eval "$(cs setup --env 2>/dev/null)"

# extra
if test -e ~/.localrc
then source ~/.localrc
fi

# if there is a kubeconfig configuration, use it
if test -e kubeconfig
then export KUBECONFIG=$PWD/kubeconfig
fi

alias k="kubectl"
alias ka="kubectl apply"
alias kg="kubectl get"
alias kd="kubectl delete"
alias kns="kubectl config  set-context --current --namespace"

# local setup
if test -e Taskfile.yml
then task setup
fi
